1 输入和输出

print 'The quick brown fox', 'jumps over', 'the lazy dog'

name = raw_input('please enter your name: ')

2  Python基础 
   当语句以冒号“:”结尾时，缩进的语句视为代码块。始终坚持使用4个空格的缩进。Python程序是大小写敏感的  
   input它会根据用户输入变换相应的类型,而且如果要输入字符和字符串的时候必须要用引号包起来,而raw_input则是不管用户输入什么类型的都会转变成字符型.
   
   2.1 数据类型和变量
   
   整数 
		Python包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。 十六进制用0x前缀 
   浮点数  
		1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5， 整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。
	字符串
		''或""本身只是一种表示方式,'I\'m \"OK\"!' 输出 I'm "OK"!	转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\
		Python还允许用r''表示''内部的字符串默认不转义  Python允许用''' xxx'''的格式表示多行内容
	布尔值
		可以直接用True、False表示布尔值（请注意大小写）
	空值
		空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
	变量
		变量名必须是大小写英文、数字和_的组合，且不能用数字开头
		
		在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
	常量
		在Python中，通常用全部大写的变量名表示常量
		
	2.2  字符串和编码
		ASCII编码是1个字节，而Unicode编码通常是2个字节  UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
		
		Python的字符串
			Python提供了ord()和chr()函数，可以把字母和对应的数字相互转换
			Python在后来添加了对Unicode的支持，以Unicode表示的字符串用u'...'表示
			字符串'xxx'虽然是ASCII编码，但也可以看成是UTF-8编码，而u'xxx'则只能是Unicode编码。
			把u'xxx'转换为UTF-8编码的'xxx'用encode('utf-8')方法：
		格式化
			 'Hi, %s, you have $%d.' % ('Michael', 1000000)  'Hi, Michael, you have $1000000.'
			 %d	整数 %f	浮点数   %s	字符串    %x 十六进制整数   其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：  '%2d-%02d' % (3, 1)  ' 3-01'  ,'%.2f' % 3.1415926  '3.14'
			 用%%来表示一个%
	2.3 使用list和tuple
		list  classmates = ['Michael', 'Bob', 'Tracy']
			Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
			还可以用-1做索引，直接获取最后一个元素：
			list是一个可变的有序表，  append    insert    删除list末尾的元素，用pop()方法：要删除指定位置的元素，用pop(i)方法，其中i是索引位置：
			要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
			list里面的元素的数据类型也可以不同，
			list元素也可以是另一个list
		tuple  classmates = ('Michael', 'Bob', 'Tracy')
			元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，
			有1个元素的tuple定义时必须加一个逗号,
			
		循环过程中严禁修改被循环集合的内容，否则会有各种奇怪的bug
	2.4 条件判断和循环
		if: elif: else    
		for  x in x:  
		while
	2.5 使用dict和set
		dict  d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
			Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。
			d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
			in判断key是否存在  dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：  d.get('Thomas', -1)
			要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
		set  s = set([1, 1, 2, 2, 3, 3])
			set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
3	函数
	
	3.1 调用函数
	3.2 定义函数
		在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。
		如果想定义一个什么事也不做的空函数，可以用pass语句：
		函数可以返回多个值    返回值是一个tuple！
	3.3 函数的参数
		默认参数 默认参数一定要用不可变对象
		可变参数(参数前面加了一个*号)   *args是可变参数，args接收的是一个tuple；
			这些可变参数在函数调用时自动组装为一个tuple
			定义可变参数仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：
		关键字参数  **kw是关键字参数，kw接收的是一个dict。
			**kw  这些关键字参数在函数内部自动组装为一个dict。
		参数组合
4	高级特性
	4.1 切片 [x:x]
	4.2 迭代
		默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.itervalues()，如果要同时迭代key和value，可以用for k, v in d.iteritems()。
		由于字符串也是可迭代对象，因此，也可以作用于for循环：
		判断一个对象是可迭代对象  from collections import Iterable     isinstance(x, Iterable) 
		Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：   for i, value in enumerate(['A', 'B', 'C']):
		for x, y in [(1, 1), (2, 4), (3, 9)]:
	4.3 列表生成式
		写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来
		[m + n for m in 'ABC' for n in 'XYZ']   [s.lower() for s in L]
		L = ['Hello', 'World', 18, 'Apple', None]   print [s.lower() for s in L if isinstance(s,str)]
	4.4 生成式
		要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()
		定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
5	函数式编程
	5.1 高阶函数
		变量可以指向函数  函数名也是变量	传入函数 
		既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。 编写高阶函数，就是让函数的参数能够接收别的函数。
	
		5.1.1 map/reduce
			map --->  list
			reduce的用法。reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，
		5.1.2 filter	
			filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
		5.1.3 sorted
			对于两个元素x和y，如果认为x < y，则返回-1，如果认为x == y，则返回0，如果认为x > y，则返回1  可以实现自定义的排序
	5.2 返回函数
		函数作为返回值
		闭包  返回函数不要引用任何循环变量，或者后续会发生变化的变量。
	5.3 匿名函数
		匿名函数lambda x: x * x   关键字lambda表示匿名函数，冒号前面的x表示函数参数。用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数
	5.4 装饰器
		import functools

		def log(func):
			@functools.wraps(func)
			def wrapper(*args, **kw):
				print 'call %s():' % func.__name__
				return func(*args, **kw)
			return wrapper
			
		import functools

		def log(text):
			def decorator(func):
				@functools.wraps(func)
				def wrapper(*args, **kw):
					print '%s %s():' % (text, func.__name__)
					return func(*args, **kw)
				return wrapper
			return decorator
	5.5 偏函数
		简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。
6	模块
	6.1 使用模块
		别名  作用域  类似_xxx和__xxx这样的函数或变量就是非公开的（private）
	6.2 安装第三方模块